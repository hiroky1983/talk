// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file app/ai_conversation_service.proto (package app.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AIConversationRequest, AIConversationResponse, ConversationEvent, EndConversationRequest, EndConversationResponse, StartConversationRequest, StartConversationResponse } from "./ai_conversation_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * AI Conversation Service
 *
 * @generated from service app.v1.AIConversationService
 */
export const AIConversationService = {
  typeName: "app.v1.AIConversationService",
  methods: {
    /**
     * Start a new conversation session
     *
     * @generated from rpc app.v1.AIConversationService.StartConversation
     */
    startConversation: {
      name: "StartConversation",
      I: StartConversationRequest,
      O: StartConversationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * End a conversation session
     *
     * @generated from rpc app.v1.AIConversationService.EndConversation
     */
    endConversation: {
      name: "EndConversation",
      I: EndConversationRequest,
      O: EndConversationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send a single message and get response (unary)
     *
     * @generated from rpc app.v1.AIConversationService.SendMessage
     */
    sendMessage: {
      name: "SendMessage",
      I: AIConversationRequest,
      O: AIConversationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Bidirectional streaming conversation
     *
     * @generated from rpc app.v1.AIConversationService.StreamConversation
     */
    streamConversation: {
      name: "StreamConversation",
      I: AIConversationRequest,
      O: AIConversationResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * Stream conversation events (server-side streaming)
     *
     * @generated from rpc app.v1.AIConversationService.StreamConversationEvents
     */
    streamConversationEvents: {
      name: "StreamConversationEvents",
      I: StartConversationRequest,
      O: ConversationEvent,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

