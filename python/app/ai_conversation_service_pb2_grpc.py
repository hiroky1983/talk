# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from app import ai_conversation_pb2 as app_dot_ai__conversation__pb2


class AIConversationServiceStub(object):
    """AI Conversation Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartConversation = channel.unary_unary(
                '/app.v1.AIConversationService/StartConversation',
                request_serializer=app_dot_ai__conversation__pb2.StartConversationRequest.SerializeToString,
                response_deserializer=app_dot_ai__conversation__pb2.StartConversationResponse.FromString,
                _registered_method=True)
        self.EndConversation = channel.unary_unary(
                '/app.v1.AIConversationService/EndConversation',
                request_serializer=app_dot_ai__conversation__pb2.EndConversationRequest.SerializeToString,
                response_deserializer=app_dot_ai__conversation__pb2.EndConversationResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/app.v1.AIConversationService/SendMessage',
                request_serializer=app_dot_ai__conversation__pb2.AIConversationRequest.SerializeToString,
                response_deserializer=app_dot_ai__conversation__pb2.AIConversationResponse.FromString,
                _registered_method=True)
        self.StreamConversation = channel.stream_stream(
                '/app.v1.AIConversationService/StreamConversation',
                request_serializer=app_dot_ai__conversation__pb2.AIConversationRequest.SerializeToString,
                response_deserializer=app_dot_ai__conversation__pb2.AIConversationResponse.FromString,
                _registered_method=True)
        self.StreamConversationEvents = channel.unary_stream(
                '/app.v1.AIConversationService/StreamConversationEvents',
                request_serializer=app_dot_ai__conversation__pb2.StartConversationRequest.SerializeToString,
                response_deserializer=app_dot_ai__conversation__pb2.ConversationEvent.FromString,
                _registered_method=True)


class AIConversationServiceServicer(object):
    """AI Conversation Service
    """

    def StartConversation(self, request, context):
        """Start a new conversation session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndConversation(self, request, context):
        """End a conversation session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Send a single message and get response (unary)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamConversation(self, request_iterator, context):
        """Bidirectional streaming conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamConversationEvents(self, request, context):
        """Stream conversation events (server-side streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIConversationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.StartConversation,
                    request_deserializer=app_dot_ai__conversation__pb2.StartConversationRequest.FromString,
                    response_serializer=app_dot_ai__conversation__pb2.StartConversationResponse.SerializeToString,
            ),
            'EndConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.EndConversation,
                    request_deserializer=app_dot_ai__conversation__pb2.EndConversationRequest.FromString,
                    response_serializer=app_dot_ai__conversation__pb2.EndConversationResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=app_dot_ai__conversation__pb2.AIConversationRequest.FromString,
                    response_serializer=app_dot_ai__conversation__pb2.AIConversationResponse.SerializeToString,
            ),
            'StreamConversation': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamConversation,
                    request_deserializer=app_dot_ai__conversation__pb2.AIConversationRequest.FromString,
                    response_serializer=app_dot_ai__conversation__pb2.AIConversationResponse.SerializeToString,
            ),
            'StreamConversationEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamConversationEvents,
                    request_deserializer=app_dot_ai__conversation__pb2.StartConversationRequest.FromString,
                    response_serializer=app_dot_ai__conversation__pb2.ConversationEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'app.v1.AIConversationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('app.v1.AIConversationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIConversationService(object):
    """AI Conversation Service
    """

    @staticmethod
    def StartConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/app.v1.AIConversationService/StartConversation',
            app_dot_ai__conversation__pb2.StartConversationRequest.SerializeToString,
            app_dot_ai__conversation__pb2.StartConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/app.v1.AIConversationService/EndConversation',
            app_dot_ai__conversation__pb2.EndConversationRequest.SerializeToString,
            app_dot_ai__conversation__pb2.EndConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/app.v1.AIConversationService/SendMessage',
            app_dot_ai__conversation__pb2.AIConversationRequest.SerializeToString,
            app_dot_ai__conversation__pb2.AIConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamConversation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/app.v1.AIConversationService/StreamConversation',
            app_dot_ai__conversation__pb2.AIConversationRequest.SerializeToString,
            app_dot_ai__conversation__pb2.AIConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamConversationEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/app.v1.AIConversationService/StreamConversationEvents',
            app_dot_ai__conversation__pb2.StartConversationRequest.SerializeToString,
            app_dot_ai__conversation__pb2.ConversationEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
