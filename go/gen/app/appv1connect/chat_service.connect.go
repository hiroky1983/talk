// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app/chat_service.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	app "github.com/hiroky1983/talk/go/gen/app"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "app.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceJoinChatProcedure is the fully-qualified name of the ChatService's JoinChat RPC.
	ChatServiceJoinChatProcedure = "/app.v1.ChatService/JoinChat"
	// ChatServiceSendMessageProcedure is the fully-qualified name of the ChatService's SendMessage RPC.
	ChatServiceSendMessageProcedure = "/app.v1.ChatService/SendMessage"
	// ChatServiceStreamChatProcedure is the fully-qualified name of the ChatService's StreamChat RPC.
	ChatServiceStreamChatProcedure = "/app.v1.ChatService/StreamChat"
	// ChatServiceBiStreamChatProcedure is the fully-qualified name of the ChatService's BiStreamChat
	// RPC.
	ChatServiceBiStreamChatProcedure = "/app.v1.ChatService/BiStreamChat"
)

// ChatServiceClient is a client for the app.v1.ChatService service.
type ChatServiceClient interface {
	// Join a chat room
	JoinChat(context.Context, *connect.Request[app.JoinChatRequest]) (*connect.Response[app.JoinChatResponse], error)
	// Send a message to a chat room
	SendMessage(context.Context, *connect.Request[app.SendMessageRequest]) (*connect.Response[app.SendMessageResponse], error)
	// Stream chat events (server streaming)
	StreamChat(context.Context, *connect.Request[app.StreamChatRequest]) (*connect.ServerStreamForClient[app.ChatEvent], error)
	// Bidirectional streaming chat
	BiStreamChat(context.Context) *connect.BidiStreamForClient[app.SendMessageRequest, app.ChatEvent]
}

// NewChatServiceClient constructs a client for the app.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatServiceMethods := app.File_app_chat_service_proto.Services().ByName("ChatService").Methods()
	return &chatServiceClient{
		joinChat: connect.NewClient[app.JoinChatRequest, app.JoinChatResponse](
			httpClient,
			baseURL+ChatServiceJoinChatProcedure,
			connect.WithSchema(chatServiceMethods.ByName("JoinChat")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[app.SendMessageRequest, app.SendMessageResponse](
			httpClient,
			baseURL+ChatServiceSendMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		streamChat: connect.NewClient[app.StreamChatRequest, app.ChatEvent](
			httpClient,
			baseURL+ChatServiceStreamChatProcedure,
			connect.WithSchema(chatServiceMethods.ByName("StreamChat")),
			connect.WithClientOptions(opts...),
		),
		biStreamChat: connect.NewClient[app.SendMessageRequest, app.ChatEvent](
			httpClient,
			baseURL+ChatServiceBiStreamChatProcedure,
			connect.WithSchema(chatServiceMethods.ByName("BiStreamChat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	joinChat     *connect.Client[app.JoinChatRequest, app.JoinChatResponse]
	sendMessage  *connect.Client[app.SendMessageRequest, app.SendMessageResponse]
	streamChat   *connect.Client[app.StreamChatRequest, app.ChatEvent]
	biStreamChat *connect.Client[app.SendMessageRequest, app.ChatEvent]
}

// JoinChat calls app.v1.ChatService.JoinChat.
func (c *chatServiceClient) JoinChat(ctx context.Context, req *connect.Request[app.JoinChatRequest]) (*connect.Response[app.JoinChatResponse], error) {
	return c.joinChat.CallUnary(ctx, req)
}

// SendMessage calls app.v1.ChatService.SendMessage.
func (c *chatServiceClient) SendMessage(ctx context.Context, req *connect.Request[app.SendMessageRequest]) (*connect.Response[app.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// StreamChat calls app.v1.ChatService.StreamChat.
func (c *chatServiceClient) StreamChat(ctx context.Context, req *connect.Request[app.StreamChatRequest]) (*connect.ServerStreamForClient[app.ChatEvent], error) {
	return c.streamChat.CallServerStream(ctx, req)
}

// BiStreamChat calls app.v1.ChatService.BiStreamChat.
func (c *chatServiceClient) BiStreamChat(ctx context.Context) *connect.BidiStreamForClient[app.SendMessageRequest, app.ChatEvent] {
	return c.biStreamChat.CallBidiStream(ctx)
}

// ChatServiceHandler is an implementation of the app.v1.ChatService service.
type ChatServiceHandler interface {
	// Join a chat room
	JoinChat(context.Context, *connect.Request[app.JoinChatRequest]) (*connect.Response[app.JoinChatResponse], error)
	// Send a message to a chat room
	SendMessage(context.Context, *connect.Request[app.SendMessageRequest]) (*connect.Response[app.SendMessageResponse], error)
	// Stream chat events (server streaming)
	StreamChat(context.Context, *connect.Request[app.StreamChatRequest], *connect.ServerStream[app.ChatEvent]) error
	// Bidirectional streaming chat
	BiStreamChat(context.Context, *connect.BidiStream[app.SendMessageRequest, app.ChatEvent]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceMethods := app.File_app_chat_service_proto.Services().ByName("ChatService").Methods()
	chatServiceJoinChatHandler := connect.NewUnaryHandler(
		ChatServiceJoinChatProcedure,
		svc.JoinChat,
		connect.WithSchema(chatServiceMethods.ByName("JoinChat")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSendMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceStreamChatHandler := connect.NewServerStreamHandler(
		ChatServiceStreamChatProcedure,
		svc.StreamChat,
		connect.WithSchema(chatServiceMethods.ByName("StreamChat")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceBiStreamChatHandler := connect.NewBidiStreamHandler(
		ChatServiceBiStreamChatProcedure,
		svc.BiStreamChat,
		connect.WithSchema(chatServiceMethods.ByName("BiStreamChat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceJoinChatProcedure:
			chatServiceJoinChatHandler.ServeHTTP(w, r)
		case ChatServiceSendMessageProcedure:
			chatServiceSendMessageHandler.ServeHTTP(w, r)
		case ChatServiceStreamChatProcedure:
			chatServiceStreamChatHandler.ServeHTTP(w, r)
		case ChatServiceBiStreamChatProcedure:
			chatServiceBiStreamChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) JoinChat(context.Context, *connect.Request[app.JoinChatRequest]) (*connect.Response[app.JoinChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ChatService.JoinChat is not implemented"))
}

func (UnimplementedChatServiceHandler) SendMessage(context.Context, *connect.Request[app.SendMessageRequest]) (*connect.Response[app.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ChatService.SendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) StreamChat(context.Context, *connect.Request[app.StreamChatRequest], *connect.ServerStream[app.ChatEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ChatService.StreamChat is not implemented"))
}

func (UnimplementedChatServiceHandler) BiStreamChat(context.Context, *connect.BidiStream[app.SendMessageRequest, app.ChatEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ChatService.BiStreamChat is not implemented"))
}
