// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app/ai_conversation_service.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	app "github.com/hiroky1983/talk/go/gen/app"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AIConversationServiceName is the fully-qualified name of the AIConversationService service.
	AIConversationServiceName = "app.v1.AIConversationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AIConversationServiceStartConversationProcedure is the fully-qualified name of the
	// AIConversationService's StartConversation RPC.
	AIConversationServiceStartConversationProcedure = "/app.v1.AIConversationService/StartConversation"
	// AIConversationServiceEndConversationProcedure is the fully-qualified name of the
	// AIConversationService's EndConversation RPC.
	AIConversationServiceEndConversationProcedure = "/app.v1.AIConversationService/EndConversation"
	// AIConversationServiceSendMessageProcedure is the fully-qualified name of the
	// AIConversationService's SendMessage RPC.
	AIConversationServiceSendMessageProcedure = "/app.v1.AIConversationService/SendMessage"
	// AIConversationServiceStreamConversationProcedure is the fully-qualified name of the
	// AIConversationService's StreamConversation RPC.
	AIConversationServiceStreamConversationProcedure = "/app.v1.AIConversationService/StreamConversation"
	// AIConversationServiceStreamConversationEventsProcedure is the fully-qualified name of the
	// AIConversationService's StreamConversationEvents RPC.
	AIConversationServiceStreamConversationEventsProcedure = "/app.v1.AIConversationService/StreamConversationEvents"
)

// AIConversationServiceClient is a client for the app.v1.AIConversationService service.
type AIConversationServiceClient interface {
	// Start a new conversation session
	StartConversation(context.Context, *connect.Request[app.StartConversationRequest]) (*connect.Response[app.StartConversationResponse], error)
	// End a conversation session
	EndConversation(context.Context, *connect.Request[app.EndConversationRequest]) (*connect.Response[app.EndConversationResponse], error)
	// Send a single message and get response (unary)
	SendMessage(context.Context, *connect.Request[app.AIConversationRequest]) (*connect.Response[app.AIConversationResponse], error)
	// Bidirectional streaming conversation
	StreamConversation(context.Context) *connect.BidiStreamForClient[app.AIConversationRequest, app.AIConversationResponse]
	// Stream conversation events (server-side streaming)
	StreamConversationEvents(context.Context, *connect.Request[app.StartConversationRequest]) (*connect.ServerStreamForClient[app.ConversationEvent], error)
}

// NewAIConversationServiceClient constructs a client for the app.v1.AIConversationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAIConversationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AIConversationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aIConversationServiceMethods := app.File_app_ai_conversation_service_proto.Services().ByName("AIConversationService").Methods()
	return &aIConversationServiceClient{
		startConversation: connect.NewClient[app.StartConversationRequest, app.StartConversationResponse](
			httpClient,
			baseURL+AIConversationServiceStartConversationProcedure,
			connect.WithSchema(aIConversationServiceMethods.ByName("StartConversation")),
			connect.WithClientOptions(opts...),
		),
		endConversation: connect.NewClient[app.EndConversationRequest, app.EndConversationResponse](
			httpClient,
			baseURL+AIConversationServiceEndConversationProcedure,
			connect.WithSchema(aIConversationServiceMethods.ByName("EndConversation")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[app.AIConversationRequest, app.AIConversationResponse](
			httpClient,
			baseURL+AIConversationServiceSendMessageProcedure,
			connect.WithSchema(aIConversationServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		streamConversation: connect.NewClient[app.AIConversationRequest, app.AIConversationResponse](
			httpClient,
			baseURL+AIConversationServiceStreamConversationProcedure,
			connect.WithSchema(aIConversationServiceMethods.ByName("StreamConversation")),
			connect.WithClientOptions(opts...),
		),
		streamConversationEvents: connect.NewClient[app.StartConversationRequest, app.ConversationEvent](
			httpClient,
			baseURL+AIConversationServiceStreamConversationEventsProcedure,
			connect.WithSchema(aIConversationServiceMethods.ByName("StreamConversationEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aIConversationServiceClient implements AIConversationServiceClient.
type aIConversationServiceClient struct {
	startConversation        *connect.Client[app.StartConversationRequest, app.StartConversationResponse]
	endConversation          *connect.Client[app.EndConversationRequest, app.EndConversationResponse]
	sendMessage              *connect.Client[app.AIConversationRequest, app.AIConversationResponse]
	streamConversation       *connect.Client[app.AIConversationRequest, app.AIConversationResponse]
	streamConversationEvents *connect.Client[app.StartConversationRequest, app.ConversationEvent]
}

// StartConversation calls app.v1.AIConversationService.StartConversation.
func (c *aIConversationServiceClient) StartConversation(ctx context.Context, req *connect.Request[app.StartConversationRequest]) (*connect.Response[app.StartConversationResponse], error) {
	return c.startConversation.CallUnary(ctx, req)
}

// EndConversation calls app.v1.AIConversationService.EndConversation.
func (c *aIConversationServiceClient) EndConversation(ctx context.Context, req *connect.Request[app.EndConversationRequest]) (*connect.Response[app.EndConversationResponse], error) {
	return c.endConversation.CallUnary(ctx, req)
}

// SendMessage calls app.v1.AIConversationService.SendMessage.
func (c *aIConversationServiceClient) SendMessage(ctx context.Context, req *connect.Request[app.AIConversationRequest]) (*connect.Response[app.AIConversationResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// StreamConversation calls app.v1.AIConversationService.StreamConversation.
func (c *aIConversationServiceClient) StreamConversation(ctx context.Context) *connect.BidiStreamForClient[app.AIConversationRequest, app.AIConversationResponse] {
	return c.streamConversation.CallBidiStream(ctx)
}

// StreamConversationEvents calls app.v1.AIConversationService.StreamConversationEvents.
func (c *aIConversationServiceClient) StreamConversationEvents(ctx context.Context, req *connect.Request[app.StartConversationRequest]) (*connect.ServerStreamForClient[app.ConversationEvent], error) {
	return c.streamConversationEvents.CallServerStream(ctx, req)
}

// AIConversationServiceHandler is an implementation of the app.v1.AIConversationService service.
type AIConversationServiceHandler interface {
	// Start a new conversation session
	StartConversation(context.Context, *connect.Request[app.StartConversationRequest]) (*connect.Response[app.StartConversationResponse], error)
	// End a conversation session
	EndConversation(context.Context, *connect.Request[app.EndConversationRequest]) (*connect.Response[app.EndConversationResponse], error)
	// Send a single message and get response (unary)
	SendMessage(context.Context, *connect.Request[app.AIConversationRequest]) (*connect.Response[app.AIConversationResponse], error)
	// Bidirectional streaming conversation
	StreamConversation(context.Context, *connect.BidiStream[app.AIConversationRequest, app.AIConversationResponse]) error
	// Stream conversation events (server-side streaming)
	StreamConversationEvents(context.Context, *connect.Request[app.StartConversationRequest], *connect.ServerStream[app.ConversationEvent]) error
}

// NewAIConversationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAIConversationServiceHandler(svc AIConversationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aIConversationServiceMethods := app.File_app_ai_conversation_service_proto.Services().ByName("AIConversationService").Methods()
	aIConversationServiceStartConversationHandler := connect.NewUnaryHandler(
		AIConversationServiceStartConversationProcedure,
		svc.StartConversation,
		connect.WithSchema(aIConversationServiceMethods.ByName("StartConversation")),
		connect.WithHandlerOptions(opts...),
	)
	aIConversationServiceEndConversationHandler := connect.NewUnaryHandler(
		AIConversationServiceEndConversationProcedure,
		svc.EndConversation,
		connect.WithSchema(aIConversationServiceMethods.ByName("EndConversation")),
		connect.WithHandlerOptions(opts...),
	)
	aIConversationServiceSendMessageHandler := connect.NewUnaryHandler(
		AIConversationServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(aIConversationServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	aIConversationServiceStreamConversationHandler := connect.NewBidiStreamHandler(
		AIConversationServiceStreamConversationProcedure,
		svc.StreamConversation,
		connect.WithSchema(aIConversationServiceMethods.ByName("StreamConversation")),
		connect.WithHandlerOptions(opts...),
	)
	aIConversationServiceStreamConversationEventsHandler := connect.NewServerStreamHandler(
		AIConversationServiceStreamConversationEventsProcedure,
		svc.StreamConversationEvents,
		connect.WithSchema(aIConversationServiceMethods.ByName("StreamConversationEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app.v1.AIConversationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AIConversationServiceStartConversationProcedure:
			aIConversationServiceStartConversationHandler.ServeHTTP(w, r)
		case AIConversationServiceEndConversationProcedure:
			aIConversationServiceEndConversationHandler.ServeHTTP(w, r)
		case AIConversationServiceSendMessageProcedure:
			aIConversationServiceSendMessageHandler.ServeHTTP(w, r)
		case AIConversationServiceStreamConversationProcedure:
			aIConversationServiceStreamConversationHandler.ServeHTTP(w, r)
		case AIConversationServiceStreamConversationEventsProcedure:
			aIConversationServiceStreamConversationEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAIConversationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAIConversationServiceHandler struct{}

func (UnimplementedAIConversationServiceHandler) StartConversation(context.Context, *connect.Request[app.StartConversationRequest]) (*connect.Response[app.StartConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AIConversationService.StartConversation is not implemented"))
}

func (UnimplementedAIConversationServiceHandler) EndConversation(context.Context, *connect.Request[app.EndConversationRequest]) (*connect.Response[app.EndConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AIConversationService.EndConversation is not implemented"))
}

func (UnimplementedAIConversationServiceHandler) SendMessage(context.Context, *connect.Request[app.AIConversationRequest]) (*connect.Response[app.AIConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AIConversationService.SendMessage is not implemented"))
}

func (UnimplementedAIConversationServiceHandler) StreamConversation(context.Context, *connect.BidiStream[app.AIConversationRequest, app.AIConversationResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AIConversationService.StreamConversation is not implemented"))
}

func (UnimplementedAIConversationServiceHandler) StreamConversationEvents(context.Context, *connect.Request[app.StartConversationRequest], *connect.ServerStream[app.ConversationEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AIConversationService.StreamConversationEvents is not implemented"))
}
